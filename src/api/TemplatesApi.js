/*
 * Klaviyo API
 * Empowering creators to own their destiny
 *
 * OpenAPI spec version: 2021.11.26
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.32
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient.js";
import {InlineResponse20013} from '../model/InlineResponse20013.js';
import {InlineResponse20014} from '../model/InlineResponse20014.js';
import {RenderedTemplate} from '../model/RenderedTemplate.js';
import {Template} from '../model/Template.js';

/**
* Templates service.
* @module api/TemplatesApi
* @version 2021.11.26
*/
export class TemplatesApi {

    /**
    * Constructs a new TemplatesApi. 
    * @alias module:api/TemplatesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Clone Template
     * Creates a copy of a given template with a new name.
     * @param {<&vendorExtensions.x-jsdoc-type>} templateId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.name 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Template}
     */
    cloneTemplate(templateId, opts) {

    opts = opts || {};
      let postBody = null;
      // verify the required parameter 'templateId' is set
      if (templateId === undefined || templateId === null) {
        throw new Error("Missing the required parameter 'templateId' when calling cloneTemplate");
      }

      let pathParams = {
        'template_id': templateId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        'name': opts['name']
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = Template;

      return ApiClient.instance.callApi(
        '/v1/email-template/{template_id}/clone', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      ).then(function(response_and_data) {
          return response_and_data.data;
      });
    }

    /**
     * Create New Template
     * Creates a new email template.
     * @param {Object} opts Optional parameters
     * @param {String} opts.name 
     * @param {String} opts.html 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Template}
     */
    createTemplate(opts) {

    opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        'name': opts['name'],'html': opts['html']
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = Template;

      return ApiClient.instance.callApi(
        '/v1/email-templates', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      ).then(function(response_and_data) {
          return response_and_data.data;
      });
    }

    /**
     * Delete Template
     * Deletes a given template.
     * @param {<&vendorExtensions.x-jsdoc-type>} templateId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20014}
     */
    deleteTemplate(templateId) {

    
      let postBody = null;
      // verify the required parameter 'templateId' is set
      if (templateId === undefined || templateId === null) {
        throw new Error("Missing the required parameter 'templateId' when calling deleteTemplate");
      }

      let pathParams = {
        'template_id': templateId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20014;

      return ApiClient.instance.callApi(
        '/v1/email-template/{template_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      ).then(function(response_and_data) {
          return response_and_data.data;
      });
    }

    /**
     * Get All Templates
     * Returns a list of all the email templates you&#x27;ve created. The templates are returned in sorted order by &#x60;name&#x60;.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20013}
     */
    getTemplates() {

    
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20013;

      return ApiClient.instance.callApi(
        '/v1/email-templates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      ).then(function(response_and_data) {
          return response_and_data.data;
      });
    }

    /**
     * Render Template
     * Renders the specified template with the provided data and return HTML and text versions of the email.
     * @param {<&vendorExtensions.x-jsdoc-type>} templateId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.context 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RenderedTemplate}
     */
    renderTemplate(templateId, opts) {

    opts = opts || {};
      let postBody = null;
      // verify the required parameter 'templateId' is set
      if (templateId === undefined || templateId === null) {
        throw new Error("Missing the required parameter 'templateId' when calling renderTemplate");
      }

      let pathParams = {
        'template_id': templateId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        'context': opts['context']
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = RenderedTemplate;

      return ApiClient.instance.callApi(
        '/v1/email-template/{template_id}/render', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      ).then(function(response_and_data) {
          return response_and_data.data;
      });
    }

    /**
     * Render and Send Template
     * Renders the specified template with the provided data and send the contents in an email via the service specified. This API is intended to test templates only, and is rate limited to the following thresholds: 100/hour, 1,000/day.  NOTE: To perform this action, your account first needs to be [verified](https://help.klaviyo.com/hc/en-us/articles/115000628331-About-Account-Verification) by Klaviyo. 
     * @param {<&vendorExtensions.x-jsdoc-type>} templateId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.fromEmail 
     * @param {String} opts.fromName 
     * @param {String} opts.subject 
     * @param {String} opts.to 
     * @param {String} opts.context 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RenderedTemplate}
     */
    sendTemplate(templateId, opts) {

    opts = opts || {};
      let postBody = null;
      // verify the required parameter 'templateId' is set
      if (templateId === undefined || templateId === null) {
        throw new Error("Missing the required parameter 'templateId' when calling sendTemplate");
      }

      let pathParams = {
        'template_id': templateId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        'from_email': opts['fromEmail'],'from_name': opts['fromName'],'subject': opts['subject'],'to': opts['to'],'context': opts['context']
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = RenderedTemplate;

      return ApiClient.instance.callApi(
        '/v1/email-template/{template_id}/send', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      ).then(function(response_and_data) {
          return response_and_data.data;
      });
    }

    /**
     * Update Template
     * Updates the name and/or HTML content of a template. Only updates imported HTML templates; does not currently update drag &amp; drop templates.
     * @param {<&vendorExtensions.x-jsdoc-type>} templateId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.name 
     * @param {String} opts.html 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Template}
     */
    updateTemplate(templateId, opts) {

    opts = opts || {};
      let postBody = null;
      // verify the required parameter 'templateId' is set
      if (templateId === undefined || templateId === null) {
        throw new Error("Missing the required parameter 'templateId' when calling updateTemplate");
      }

      let pathParams = {
        'template_id': templateId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        'name': opts['name'],'html': opts['html']
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = Template;

      return ApiClient.instance.callApi(
        '/v1/email-template/{template_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      ).then(function(response_and_data) {
          return response_and_data.data;
      });
    }

}